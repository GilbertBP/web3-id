from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256

class BlockchainIdentity:
    def __init__(self):
        # Генерация ключей
        key = RSA.generate(2048)
        self.private_key = key.export_key()
        self.public_key = key.publickey().export_key()

    def sign_data(self, data):
        # Подписывание данных приватным ключом
        key = RSA.import_key(self.private_key)
        h = SHA256.new(data.encode())
        signature = pkcs1_15.new(key).sign(h)
        return signature

    def verify_signature(self, data, signature, public_key):
        # Проверка подписи с использованием публичного ключа
        key = RSA.import_key(public_key)
        h = SHA256.new(data.encode())
        try:
            pkcs1_15.new(key).verify(h, signature)
            return True
        except (ValueError, TypeError):
            return False

# Пример использования
user_identity = BlockchainIdentity()

# Данные для подписи
data_to_sign = "Hello, Blockchain!"

# Подпись данных
signature = user_identity.sign_data(data_to_sign)

# Проверка подписи
is_valid = user_identity.verify_signature(data_to_sign, signature, user_identity.public_key)

if is_valid:
    print("Подпись верна.")
else:
    print("Подпись недействительна.")
